@page "/Upload"
@using SymmetricalWaifu.Shared
@using System.Net
@inject HttpClient HttpClient

<h3>Upload</h3>

<input @bind="_token"/>
@if (_token.Length == 128)
{
    <InputFile OnChange="FileSelected"/>
    <form>
        <div class="mb-3">
            <label>Image Title</label>
            <input @bind="_title"/>
        </div>
        <div class="mb-3">
            <label>Description</label>
            <textarea @bind="_desc"></textarea>
        </div>
        <div class="mb-3">
            <label>Source</label>
            <input @bind="_source"/>
        </div>
    </form>
}
@if (_showButton)
{
    <button @onclick="Submit">Submit</button>
}
@if (_showProgressBar)
{
    <br/>
    <progress value="@_read" max="@_file.Size"></progress>
}
@if (_showComplete)
{
    <p>Submitted!</p>
}
@if (_showSizeTooLarge)
{
    <p>File is too large! Max: 12 MiB (12582912 bytes)</p>
}
@if (_showInvalidToken)
{
    <p>Invalid token. Please try signing in again.</p>
}

@code {

    IBrowserFile _file = null!;
    private string _token = string.Empty;
    private long _read;
    private bool _showButton, _showProgressBar, _showSizeTooLarge, _showInvalidToken, _showComplete;
    private string _title = string.Empty;
    private string _desc = string.Empty;
    private string _source = string.Empty;

    private void FileSelected(InputFileChangeEventArgs e)
    {
        _file = e.File;
        _showButton = true;
    }

    private async void Submit()
    {
    // Validation
        if (_file.Size > 12582912)
        {
            _showSizeTooLarge = true;
            return;
        }
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("WaifuApi/AllocateWaifu", _token);
        if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            _showInvalidToken = true;
            StateHasChanged();
            return;
        }
        _showProgressBar = true;
        StateHasChanged();

    // Pre-upload
        var filePath = await response.Content.ReadFromJsonAsync<WaifuAllocation>();
        string directory = filePath!.Directory;
        string name = filePath.NameWithoutExtension;
        string extension = Path.GetExtension(_file.Name);

    // Upload
        Stream stream = _file.OpenReadStream(12582912);
        while (_read != _file.Size)
        {
            byte[] bytes = _read + 1048576 >= _file.Size ? new byte[_file.Size - _read] : new byte[1048576];
            _read += await stream.ReadAsync(bytes);
            var file = new WaifuDataTransfer
            {
                Directory = directory,
                Name = name,
                Extension = extension,
                Contents = bytes
            };
            await HttpClient.PostAsJsonAsync("WaifuApi/UploadWaifu", file);
            StateHasChanged();
        }

    // Submit
        var waifu = new WaifuSubmission
        {
            Directory = directory,
            Name = name,
            Extension = extension,
            Title = _title,
            Description = _desc,
            Token = _token,
            Source = _source
        };
        await HttpClient.PostAsJsonAsync("WaifuApi/SubmitWaifu", waifu);
        _showComplete = true;
        StateHasChanged();
    }

}